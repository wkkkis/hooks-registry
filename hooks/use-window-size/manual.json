{
  "id": "use-window-size",
  "manual": true,
  "language": "tsx",
  "encoding": "utf8",
  "file": "use-window-size.tsx",
  "code": "\"use client\";\n\nimport { useEffect, useState } from \"react\";\n\ntype UseWindowSizeOptions = {\n  initialWidth?: number;\n  initialHeight?: number;\n  onChange?: (width: number, height: number) => void;\n};\n\ntype WindowSize = {\n  width: number;\n  height: number;\n};\n\nexport function useWindowSize(options: UseWindowSizeOptions = {}): WindowSize {\n  const isBrowser = typeof window !== \"undefined\";\n\n  const {\n    initialWidth = isBrowser ? window.innerWidth : 0,\n    initialHeight = isBrowser ? window.innerHeight : 0,\n    onChange,\n  } = options;\n\n  const [windowSize, setWindowSize] = useState<WindowSize>({\n    width: initialWidth,\n    height: initialHeight,\n  });\n\n  useEffect(() => {\n    if (!isBrowser) return;\n\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n\n      setWindowSize({ width, height });\n\n      if (onChange) {\n        onChange(width, height);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away to update size on mount\n    handleResize();\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [onChange, isBrowser]);\n\n  return windowSize;\n}\n"
}