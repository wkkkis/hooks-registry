{
  "id": "use-local-storage",
  "manual": true,
  "language": "tsx",
  "encoding": "utf8",
  "file": "use-local-storage.tsx",
  "code": "\"use client\";\n\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\n\ninterface UseLocalStorageOptions<T> {\n  serialize?: (value: T) => string;\n  deserialize?: (value: string) => T;\n}\n\n/**\n * Hook to synchronize a value with localStorage in a type-safe, performant, and cross-tab reactive way.\n *\n * @param key localStorage key\n * @param initialValue Initial value\n * @param options Custom serialization/deserialization functions\n */\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n  options?: UseLocalStorageOptions<T>\n) {\n  // Memoize serialize/deserialize to avoid unnecessary dependencies\n  const serialize = useMemo(\n    () => options?.serialize ?? JSON.stringify,\n    [options?.serialize]\n  );\n\n  const deserialize = useMemo(\n    () => options?.deserialize ?? JSON.parse,\n    [options?.deserialize]\n  );\n\n  // Ref to keep the initial value stable\n  const initialRef = useRef(initialValue);\n\n  const readValue = useCallback((): T => {\n    if (typeof window === \"undefined\") return initialRef.current;\n\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item != null ? (deserialize(item) as T) : initialRef.current;\n    } catch (error) {\n      console.warn(\n        `[useLocalStorage] Error reading key \"${key}\" from localStorage:`,\n        error\n      );\n\n      return initialRef.current;\n    }\n  }, [key, deserialize]);\n\n  // State synchronized with localStorage\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n\n  const setValue = useCallback(\n    (value: T | ((val: T) => T)) => {\n      try {\n        setStoredValue((prev) => {\n          const valueToStore = value instanceof Function ? value(prev) : value;\n\n          window.localStorage.setItem(key, serialize(valueToStore));\n\n          return valueToStore;\n        });\n      } catch (error) {\n        console.warn(\n          `[useLocalStorage] Error setting key \"${key}\" in localStorage:`,\n          error\n        );\n      }\n    },\n    [key, serialize]\n  );\n\n  // Synchronize between tabs\n  useEffect(() => {\n    const handleStorage = (event: StorageEvent) => {\n      if (event.key === key) {\n        setStoredValue(readValue());\n      }\n    };\n\n    window.addEventListener(\"storage\", handleStorage);\n\n    return () => window.removeEventListener(\"storage\", handleStorage);\n  }, [key, readValue]);\n\n  // Update the value if the key changes\n  useEffect(() => {\n    setStoredValue(readValue());\n  }, [key, readValue]);\n\n  return [storedValue, setValue] as const;\n}\n"
}